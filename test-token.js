const axios = require('axios');
const readline = require('readline');

// Âª∫Á´ãËÆÄÂèñËº∏ÂÖ•ÁöÑ‰ªãÈù¢
const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

// Ê∏¨Ë©¶ Access Token ÁöÑÂáΩÊï∏
async function testAccessToken(token) {
    try {
        console.log('üîç Ê≠£Âú®Ê∏¨Ë©¶ Access Token...');
        console.log('Token Ââç10ÂÄãÂ≠óÁ¨¶:', token.substring(0, 10) + '...');
        
        const response = await axios.get('https://api.line.me/v2/bot/profile', {
            headers: {
                'Authorization': `Bearer ${token}`
            },
            timeout: 10000
        });
        
        console.log('\n‚úÖ Access Token ÊúâÊïàÔºÅ');
        console.log('üì± Bot Ë≥áË®ä:');
        console.log('   - È°ØÁ§∫ÂêçÁ®±:', response.data.displayName);
        console.log('   - Áî®Êà∂ ID:', response.data.userId);
        console.log('   - ÁãÄÊÖãË®äÊÅØ:', response.data.statusMessage || 'ÁÑ°');
        console.log('   - ÂúñÁâá URL:', response.data.pictureUrl || 'ÁÑ°');
        
        return true;
        
    } catch (error) {
        console.log('\n‚ùå Access Token ÁÑ°ÊïàÔºÅ');
        
        if (error.response?.status === 401) {
            console.log('ÈåØË™§ÔºöAccess Token ÁÑ°ÊïàÊàñÂ∑≤ÈÅéÊúü');
            console.log('üí° Ëß£Ê±∫ÊñπÊ°àÔºöË´ãÂú® LINE Developers Console ÈáçÊñ∞ÁîüÊàê Access Token');
        } else if (error.response?.status === 403) {
            console.log('ÈåØË™§ÔºöAccess Token Ê¨äÈôê‰∏çË∂≥');
            console.log('üí° Ëß£Ê±∫ÊñπÊ°àÔºöÁ¢∫Ë™ç Bot Ê¨äÈôêË®≠ÂÆöÊ≠£Á¢∫');
        } else if (error.code === 'ECONNABORTED') {
            console.log('ÈåØË™§ÔºöÈÄ£Á∑öË∂ÖÊôÇ');
            console.log('üí° Ëß£Ê±∫ÊñπÊ°àÔºöÊ™¢Êü•Á∂≤Ë∑ØÈÄ£Á∑ö');
        } else if (error.code === 'ENOTFOUND') {
            console.log('ÈåØË™§ÔºöÁÑ°Ê≥ïÈÄ£Êé•Âà∞ LINE ‰º∫ÊúçÂô®');
            console.log('üí° Ëß£Ê±∫ÊñπÊ°àÔºöÊ™¢Êü•Á∂≤Ë∑ØÈÄ£Á∑ö');
        } else {
            console.log('ÈåØË™§Ôºö', error.response?.data || error.message);
        }
        
        return false;
    }
}

// Ê∏¨Ë©¶Áæ§ÁµÑÊ¨äÈôêÁöÑÂáΩÊï∏
async function testGroupAccess(token, groupId) {
    try {
        console.log(`\nüîç Ê≠£Âú®Ê∏¨Ë©¶Áæ§ÁµÑ ${groupId} ÁöÑÊ¨äÈôê...`);
        
        const response = await axios.get(`https://api.line.me/v2/bot/group/${groupId}/summary`, {
            headers: {
                'Authorization': `Bearer ${token}`
            },
            timeout: 10000
        });
        
        console.log('‚úÖ Áæ§ÁµÑÊ¨äÈôêÊ≠£Â∏∏ÔºÅ');
        console.log('üë• Áæ§ÁµÑË≥áË®ä:');
        console.log('   - Áæ§ÁµÑÂêçÁ®±:', response.data.groupName);
        console.log('   - Áæ§ÁµÑ ID:', response.data.groupId);
        console.log('   - ÊàêÂì°Êï∏Èáè:', response.data.count);
        
        return true;
        
    } catch (error) {
        console.log('‚ùå Áæ§ÁµÑÊ¨äÈôêÊ∏¨Ë©¶Â§±ÊïóÔºÅ');
        
        if (error.response?.status === 404) {
            console.log('ÈåØË™§ÔºöÁæ§ÁµÑ‰∏çÂ≠òÂú®Êàñ Bot Êú™Âä†ÂÖ•Ë©≤Áæ§ÁµÑ');
        } else if (error.response?.status === 403) {
            console.log('ÈåØË™§ÔºöBot Ê≤íÊúâË©≤Áæ§ÁµÑÁöÑÊ¨äÈôê');
        } else {
            console.log('ÈåØË™§Ôºö', error.response?.data || error.message);
        }
        
        return false;
    }
}

// ‰∏ªÁ®ãÂºè
async function main() {
    console.log('üöÄ LINE OA Access Token Ê∏¨Ë©¶Â∑•ÂÖ∑');
    console.log('=====================================\n');
    
    // ÊñπÊ≥ï1ÔºöÂæûÁí∞Â¢ÉËÆäÊï∏ËÆÄÂèñ
    let token = process.env.LINE_ACCESS_TOKEN;
    
    if (!token) {
        // ÊñπÊ≥ï2ÔºöÂæûÊ™îÊ°àËÆÄÂèñÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
        try {
            const fs = require('fs');
            if (fs.existsSync('.env')) {
                const envContent = fs.readFileSync('.env', 'utf8');
                const match = envContent.match(/LINE_ACCESS_TOKEN=(.+)/);
                if (match) {
                    token = match[1].trim();
                }
            }
        } catch (error) {
            // ÂøΩÁï•Ê™îÊ°àËÆÄÂèñÈåØË™§
        }
    }
    
    if (!token) {
        // ÊñπÊ≥ï3ÔºöÊâãÂãïËº∏ÂÖ•
        token = await new Promise((resolve) => {
            rl.question('Ë´ãËº∏ÂÖ•ÊÇ®ÁöÑ LINE Access Token: ', (answer) => {
                resolve(answer.trim());
            });
        });
    }
    
    if (!token || token === 'YOUR_ACCESS_TOKEN_HERE') {
        console.log('\n‚ùå Ë´ãÊèê‰æõÊúâÊïàÁöÑ Access TokenÔºÅ');
        console.log('üí° ÂèñÂæóÊñπÂºèÔºö');
        console.log('   1. ÂâçÂæÄ LINE Developers Console');
        console.log('   2. ÈÅ∏ÊìáÊÇ®ÁöÑ LINE Official Account');
        console.log('   3. ÈªûÊìä "Messaging API"');
        console.log('   4. Âú® "Channel access token" ÂçÄÂ°äÈªûÊìä "Issue"');
        rl.close();
        return;
    }
    
    // Ê∏¨Ë©¶ Access Token
    const tokenValid = await testAccessToken(token);
    
    if (tokenValid) {
        // Ë©¢ÂïèÊòØÂê¶Ë¶ÅÊ∏¨Ë©¶Áæ§ÁµÑÊ¨äÈôê
        const testGroup = await new Promise((resolve) => {
            rl.question('\nÊòØÂê¶Ë¶ÅÊ∏¨Ë©¶Áæ§ÁµÑÊ¨äÈôêÔºü(y/n): ', (answer) => {
                resolve(answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes');
            });
        });
        
        if (testGroup) {
            const groupId = await new Promise((resolve) => {
                rl.question('Ë´ãËº∏ÂÖ•Áæ§ÁµÑ ID: ', (answer) => {
                    resolve(answer.trim());
                });
            });
            
            if (groupId) {
                await testGroupAccess(token, groupId);
            }
        }
    }
    
    rl.close();
}

// Âü∑Ë°å‰∏ªÁ®ãÂºè
main().catch(console.error); 